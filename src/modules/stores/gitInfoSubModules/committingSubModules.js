// Services
import { GitService } from '../../../services/gitService'

// Handlers
import { logError, logThis } from '../../../handlers/outputHandler'

// Helpers
import {
  cleanUpFromN,
  cleanUpSpaces,
  getMaxLength
} from '../../../helpers/help'

// Words
import { statusLetters } from '../../../config/otherWords/gitStatusNames'

export const GIT_M_COMMITTING = {

  async commitChanges({ commitMessage }) {
    if (!commitMessage) throw new Error('No commit message')

    const { head, body } = commitMessage

    logThis(`${head}\n${body}`, 'COMMITING')

    try {
      const {
        result,
        code,
        ErrorMessage
      } = await new GitService().commitChanges({ commitMessage })

      if (code !== 0 && code !== 1) throw new Error(ErrorMessage)
      this.goingToPush = false

      if (code === 0) this.goingToPush = true
      else if (code === 1) {
        this.goingToPush = result.includes('nothing to commit, working tree clean')
      }

      this.commitStatus = result
      return this
    } catch (err) { return logError('Committing changes failed:', err) }
  },

  async createAutoCommitMsg({
    actionTime = null
  }) {
    if (!actionTime) return logError('Creating Commit Message failed:', 'No date')

    const { statusedFiles } = this

    let maxLengthFullLine = 0
    let maxLengthStatus = 0
    const allStatuses = []

    const filesWithStatus = statusedFiles.split('\n').map(fileName => {
      const statusName = cleanUpFromN(
        cleanUpSpaces(
          `${fileName.charAt(0)}${fileName.charAt(1)}`
        )
      )
      const fileNameNoStatus = cleanUpSpaces(fileName.split(statusName).join(''))
      const { shortName } = statusLetters[statusName] || {}
      if (shortName) {
        const fileLine = `  ${shortName}:  ${fileNameNoStatus}`

        if (fileLine.length > maxLengthFullLine) maxLengthFullLine = fileLine.length
        if (shortName.length > maxLengthStatus) maxLengthStatus = shortName.length

        allStatuses.push(shortName)

        return {
          status: shortName,
          fileName: fileNameNoStatus
        }
      }
    }).filter(v => v)

    const { day, month, time } = actionTime
    const { developer } = this

    const dateString = `${month} ${day} [ ${time} ]`

    let head = ''
    let body = ''

    let divider = '☐'

    for (let i = 0; i < maxLengthFullLine + 1; i += 1) divider += '-'

    divider += '☐'

    head += `❍ Automatic commit by: ${cleanUpFromN(developer)}`

    if (filesWithStatus.length) {
      body += `${divider}\r\n`

      for (let i = 0; i < filesWithStatus.length; i += 1) {
        body += `${filesWithStatus[i].status}`.padStart(maxLengthStatus + 2)
        body += `:  ${filesWithStatus[i].fileName}\r\n`
      }

      body += `${divider}\r\n`
    } else body += 'Empty commit body. Probably merging smth.\r\n'

    body += `Generated: ${dateString}`

    this.commitMessage = { head, body }

    return this
  },

  async createCommitMsg({
    actionTime = null,
    branchName = null,
    commitMsg = null
  }) {
    if (!actionTime || !branchName || !commitMsg) return logError(
      'Creating commit message failed:',
      'No date, commit message or branch name provided'
    )

    if (commitMsg === 'AUTOGENERATED') return this.createAutoCommitMsg({ actionTime })

    const { day, month, time } = actionTime
    const { developer } = this

    const dateString = `${month} ${day} [ ${time} ]`

    let head = ''
    let body = ''

    const developerLine = `  ✸ Developer: ${cleanUpFromN(developer)}`
    const dateLine = `  ✸ Date: ${cleanUpFromN(dateString)}`

    const dividerLength = getMaxLength(developerLine.length, dateLine.length)

    let divider = '☐'

    for (let i = 0; i < dividerLength; i += 1) divider += '-'
    divider += '☐'

    head += `❍ ${cleanUpFromN(commitMsg)} ❍`

    body += `${cleanUpFromN(divider)}\r\n`
    body += `${cleanUpFromN(developerLine)}\r\n`
    body += `${cleanUpFromN(dateLine)}\r\n`
    body += `${cleanUpFromN(divider)}`

    this.commitMessage = { head, body }

    return this
  }
}
