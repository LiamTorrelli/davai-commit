import inquirer from 'inquirer'

// Stores
import { ShellArgumentsStore } from '../modules/index'

async function promptForMissingOptions() {
  const commitQuestionBoolean = []
  const commitQuestionMessage = []
  const emailQuestionBoolean = []
  const emailQuestionMessage = []
  let commitConfirmation = {}
  let commitMessageConfirmation = {}
  let emailConfirmation = {}
  let emailMessageConfirmation = {}

  const {
    cliMode,
    sendCommit,
    commitMsg,
    sendEmail,
    emailMsg
  } = ShellArgumentsStore

  let disableCommitting = false
  let enableEmail = false

  if (cliMode) {
    disableCommitting = true
    enableEmail = true
  }

  if (!sendCommit && !disableCommitting)
    commitQuestionBoolean.push({
      type: 'confirm',
      name: 'sendCommit',
      message: 'Do you want to send commit?',
      default: 'true'
    })

  if (!disableCommitting) {
    commitConfirmation = await inquirer.prompt(commitQuestionBoolean)
    ShellArgumentsStore.setSendCommit(sendCommit || commitConfirmation.sendCommit)
  } else commitConfirmation.sendCommit = false

  if (!commitMsg && commitConfirmation.sendCommit && !disableCommitting) {
    commitQuestionMessage.push({
      type: 'input',
      name: 'commitMsg',
      message: 'Provide COMMIT message',
      default: 'AUTOGENERATED'
    })
    commitMessageConfirmation = await inquirer.prompt(commitQuestionMessage)
    ShellArgumentsStore.setCommitMessage(commitMsg || commitMessageConfirmation.commitMsg)
  }

  if (!sendEmail) {
    emailQuestionBoolean.push({
      type: 'confirm',
      name: 'sendEmail',
      message: 'Do you want to send email?',
      default: 'true'
    })
  }
  if (!enableEmail) {
    emailConfirmation = await inquirer.prompt(emailQuestionBoolean)
    ShellArgumentsStore.setSendEmail(sendEmail || emailConfirmation.sendEmail)
  } else emailConfirmation.sendEmail = true

  if (!emailMsg && emailConfirmation.sendEmail) {
    const predefinedEmailMsg = commitMsg || commitMessageConfirmation.commitMsg || 'AUTOGENERATED email'
    emailQuestionMessage.push({
      type: 'input',
      name: 'emailMsg',
      message: 'Provide EMAIL message',
      default: predefinedEmailMsg,
      filter: v => `${predefinedEmailMsg} ${v}`
    })
    emailMessageConfirmation = await inquirer.prompt(emailQuestionMessage)
    ShellArgumentsStore.setEmailMessage(sendEmail || emailMessageConfirmation.emailMsg)
  }
  return true
}

export { promptForMissingOptions }
